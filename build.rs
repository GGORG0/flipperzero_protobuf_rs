use std::path::PathBuf;

use miette::IntoDiagnostic;
use prost::Message;
use quote::{format_ident, quote};

fn main() -> miette::Result<()> {
    let root = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .join("src")
        .join("proto-src");

    let proto_files = [root.join("flipper.proto")];

    let file_descriptors = protox::Compiler::new(&[root])?
        .include_source_info(true)
        .include_imports(true)
        .open_files(&proto_files)?
        .file_descriptor_set();

    let all_proto_files = file_descriptors
        .file
        .iter()
        .map(|file| file.name.as_ref().unwrap())
        .collect::<Vec<_>>();

    for proto_file in all_proto_files {
        println!("cargo:rerun-if-changed={proto_file}");
    }

    let file_descriptor_set_bytes = file_descriptors.encode_to_vec();

    let packages = file_descriptors
        .file
        .iter()
        .filter_map(|file| file.package.as_ref())
        .collect::<Vec<_>>();

    let prefixes = packages
        .iter()
        .map(|package| format!(".{package}"))
        .collect::<Vec<_>>();

    prost_build::Config::new()
        .compile_well_known_types()
        .extern_path(".google.protobuf", "::pbjson_types")
        .compile_fds(file_descriptors.clone())
        .into_diagnostic()?;

    pbjson_build::Builder::new()
        .register_descriptors(&file_descriptor_set_bytes)
        .into_diagnostic()?
        .build(&prefixes)
        .into_diagnostic()?;

    let generated = packages
        .iter()
        .map(|package| {
            let package = package.to_lowercase();
            let module_name = format_ident!("{}", package);

            let prost_module = format!("/{package}.rs");
            let pbjson_module = format!("/{package}.serde.rs");

            let generated = quote! {
                pub mod #module_name {
                    // Generated by [`prost-build`]
                    include!(concat!(env!("OUT_DIR"), #prost_module));
                    // Generated by [`pbjson-build`]
                    include!(concat!(env!("OUT_DIR"), #pbjson_module));
                }
            };

            generated.to_string()
        })
        .collect::<Vec<_>>();

    let generated = generated.join("\n");

    let out_dir = std::env::var("OUT_DIR").unwrap();
    let out_file = PathBuf::from(out_dir).join("generated.rs");

    std::fs::write(&out_file, generated).into_diagnostic()?;

    Ok(())
}
